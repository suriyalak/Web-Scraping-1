import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.preprocessing import StandardScaler
import time


st.set_page_config(
    page_title="Dallas Mavericks",
    layout="centered",
    initial_sidebar_state="expanded"
)


## team name
title_cols = st.columns(3)
with title_cols[0]:
    st.image('dallasmavericks.png', caption='Dallas Mavericks')
    
with title_cols[1]:
    st.write('  ') 
    st.title('Dallas Mavericks')


st.markdown(
    """
    ##### About team
    The Dallas Mavericks are an American professional basketball team based in Dallas.
    The Mavericks compete in the NBA as a member of the Southwest Division of the Western Conference.
    The team plays its home games at American Airlines Center, which it shares with the National Hockey League's Dallas Stars.
    """
)





## team players
st.header('‚õπüèª Team Players')

with st.expander("Show the Roster"):

    players_cols1 = st.columns(5)
    with players_cols1[0]:
        st.image('max.jpg')
        st.write('Max Christie')
        st.write('00')

        st.image('jeden.jpg')
        st.write('Jaden Hardy')
        st.write('1')
        
        st.image('dwight.jpg')
        st.write('Dwight Powell')
        st.write('7')
        
        
    with players_cols1[1]:
        st.image('anthony.jpg')
        st.write('Anthony Davis')
        st.write('3')
        
        st.image('kyrie.jpg')
        st.write('Kyrie Irving')
        st.write('11')
        
        st.image('dangelo.jpg')
        st.write('D Angelo Russell')
        st.write('15')
        
        
        
    with players_cols1[2]:
        st.image('dante.jpg')
        st.write('Dant√© Exum')
        st.write('0')

        st.image('dereck.jpg')
        st.write('Dereck Lively II')
        st.write('2')
        
        st.image('klay.jpg')
        st.write('Klay Thompson')
        st.write('31')
        
    with players_cols1[3]:
        st.image('cooper.jpg')
        st.write('Cooper Flagg')
        st.write('32')
        
        st.image('naji.jpg')
        st.write('Naji Marshall')
        st.write('13')
        
        st.image('pjwash.jpg')
        st.write('P. J. Washington')
        st.write('25')
        

    with players_cols1[4]:
        st.image('daniel.jpg')
        st.write('Daniel Gafford')
        st.write('21')
        
        st.image('caleb.jpg')
        st.write('Caleb Martin')
        st.write('16')
        
        st.image('brandon.jpg')
        st.write('Brandon Williams')
        st.write('10')





## team stats
st.header('üèÜ Team Wins stat')
df = pd.read_csv('basketball.csv')
# st.line_chart(data=df, x='Season', y=['W', 'L'], x_label='Seasons (1980 - 1981 to 2024 - 2025)', y_label='Number of wins per season',
#               color=["#0099ff", "#ff0000ff"])
# st.line_chart(data=df, x='Season', y='W', x_label='Seasons (1980 - 1981 to 2024 - 2025)', y_label='Number of wins per season')

tab1, tab2 = st.tabs(["üìà Chart", "üóÉ Data"])

tab1.subheader("Team Wins per Season chart")
tab1.line_chart(data=df, x='Season', y='W', x_label='Seasons (1980 - 1981 to 2024 - 2025)', y_label='Number of wins per season')

tab2.subheader("Team Wins per Season data")
tab2.write(df)



## Predict 
# Load the pickled model
try:
    with open('model.pkl', 'rb') as f:
        model = pickle.load(f)
except FileNotFoundError:
    st.error("Error: model.pkl not found. Make sure the file is in the same directory as this script.")
    st.stop()
except Exception as e:
    st.error(f"An error occurred while loading the model: {e}")
    st.stop()


# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• feature ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
feature_info = {
    "Finish": "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏ö‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•",
    "Age": "‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏õ‡∏µ)",
    "Ht. (ft)": "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ü‡∏∏‡∏ï)",
    "Wt. (lbs)": "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏õ‡∏≠‡∏ô‡∏î‡πå)",
    "G": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô",
    "MP": "‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "FG": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á",
    "FGA": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡∏•‡∏á‡∏´‡πà‡∏ß‡∏á",
    "FG%": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏•‡∏á‡∏´‡πà‡∏ß‡∏á",
    "3P": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡∏™‡∏≤‡∏°‡πÅ‡∏ï‡πâ‡∏°",
    "3PA": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡∏™‡∏≤‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏•‡∏á",
    "3P%": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏™‡∏≤‡∏°‡πÅ‡∏ï‡πâ‡∏°",
    "2P": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ï‡πâ‡∏°",
    "2PA": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ï‡πâ‡∏°‡∏•‡∏á",
    "2P%": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ï‡πâ‡∏°",
    "FT": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á",
    "FTA": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡∏•‡∏π‡∏Å‡πÇ‡∏ó‡∏©‡∏•‡∏á",
    "FT%": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏•‡∏π‡∏Å‡πÇ‡∏ó‡∏©",
    "ORB": "‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏£‡∏∏‡∏Å",
    "DRB": "‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏£‡∏±‡∏ö",
    "TRB": "‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡∏£‡∏ß‡∏°",
    "AST": "‡πÅ‡∏≠‡∏™‡∏ã‡∏¥‡∏™‡∏ï‡πå",
    "STL": "‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏µ‡∏•",
    "BLK": "‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Ñ",
    "TOV": "‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÇ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå",
    "PF": "‡∏ü‡∏≤‡∏ß‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
    "PTS": "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°"
}

# ‡∏Ñ‡πà‡∏≤ default
default_values = [3, 27.5, 6.6, 217, 82, 19730, 3443, 7194, 0.479, 
                  1020, 2801, 0.364, 2423, 4393, 0.552, 1458, 
                  1894, 0.77, 828, 2702, 3530, 2070, 636, 445, 
                  1151, 1458, 9364]

feature_names = list(feature_info.keys())

# scaler (‡πÄ‡∏î‡πÇ‡∏°: fit ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ default)
scaler = StandardScaler()
scaler.fit([default_values])

st.header("üèÄ Basketball Win Prediction")
st.write('The result is calculated based on overall team stat, not on mental and emotional performance, which may result in inaccurate results.')

with st.form("prediction_form"):
    inputs = []
    cols = st.columns(3)

    for i, (name, val) in enumerate(zip(feature_names, default_values)):
        with cols[i % 3]:
            num = st.number_input(f"{name} ({feature_info[name]})", value=float(val), format="%.3f")
            inputs.append(num)

    submitted = st.form_submit_button("Predict")

    if submitted:
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ standardize
        X = np.array([inputs])
        X_scaled = scaler.transform(X)

        # prediction
        prediction = model.predict(X_scaled)

        progress_text = "Please wait."
        my_bar = st.progress(0, text=progress_text)

        for percent_complete in range(100):
            time.sleep(0.01)
            my_bar.progress(percent_complete + 1, text=progress_text)
        time.sleep(1)
        my_bar.empty()

        st.subheader("Prediction Result üèÜ")
        st.write(f"The team is expected to win: **{prediction[0]:,.0f}** Games")
        








## References

st.header('References')
st.write('1. About team, https://en.wikipedia.org/wiki/Dallas_Mavericks')
st.write('2. Team players, https://www.mavs.com/team/roster/')
